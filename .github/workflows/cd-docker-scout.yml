name: CD Pipeline con Docker Scout

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Autenticarse en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir imagen Docker
        run: docker build -t mjtaehyung/proyecto:latest .

      - name: Instalar Docker Scout
        run: |
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          echo "$HOME/.docker/cli-plugins" >> $GITHUB_PATH

      - name: Escanear imagen con Docker Scout y guardar salida SARIF
        run: docker scout cves mjtaehyung/proyecto:latest --format sarif > scout_output.json 2>/dev/null || true

      - name: Crear issue si hay vulnerabilidades cr칤ticas
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let outputRaw;
            try {
              outputRaw = fs.readFileSync('scout_output.json', 'utf8').trim();
            } catch (e) {
              core.setFailed("No se pudo leer scout_output.json");
              return;
            }

            let sarif;
            try {
              sarif = JSON.parse(outputRaw);
            } catch (e) {
              console.log("No es JSON v치lido, salida capturada:");
              console.log(outputRaw);
              return;
            }

            // El SARIF tiene la estructura est치ndar, las vulnerabilidades est치n en runs[*].results
            if (!sarif.runs || sarif.runs.length === 0) {
              console.log("No se encontraron vulnerabilidades o formato SARIF inesperado.");
              return;
            }

            // Extraer todos los resultados (vulnerabilidades)
            const results = sarif.runs.flatMap(run => run.results || []);

            // Filtrar vulnerabilidades cr칤ticas seg칰n severity (severities pueden variar, aqu칤 usamos 'critical')
            // En SARIF, severity puede estar en properties como 'severity' o 'level' dependiendo de la herramienta
            const criticalVulns = results.filter(r => {
              const sev = r.properties && r.properties.severity ? r.properties.severity.toLowerCase() :
                          r.level ? r.level.toLowerCase() : '';
              return sev === 'critical';
            });

            if (criticalVulns.length > 0) {
              const issueTitle = `游뚿 Vulnerabilidades cr칤ticas detectadas en la imagen Docker`;
              const issueBody = `Se detectaron **${criticalVulns.length}** vulnerabilidades cr칤ticas en la imagen \`mjtaehyung/proyecto:latest\`.\n\n` +
                                `Detalles:\n` +
                                criticalVulns.map(v => {
                                  const id = v.ruleId || "N/A";
                                  const message = v.message && v.message.text ? v.message.text : "Sin descripci칩n";
                                  return `- **${id}**: ${message}`;
                                }).join('\n') +
                                `\n\nPor favor, revisa y corrige estas vulnerabilidades antes de continuar con el despliegue.`;

              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
              });

              const existing = issues.data.find(issue => issue.title === issueTitle);
              if (!existing) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                });
                console.log("Issue creado por vulnerabilidades cr칤ticas.");
              } else {
                console.log("Ya existe un issue abierto con vulnerabilidades cr칤ticas.");
              }

              throw new Error("Se encontraron vulnerabilidades cr칤ticas. Se ha creado un issue.");
            } else {
              console.log("No se encontraron vulnerabilidades cr칤ticas.");
            }

      - name: Subir imagen a Docker Hub
        if: success()
        run: docker push mjtaehyung/proyecto:latest

      
